from mongoengine.base import (
    BaseField,
    ComplexBaseField,
    GeoJsonBaseField as GeoJsonBaseField,
    ObjectIdField as ObjectIdField,
)
from typing import Any, Optional


class StringField(BaseField):
    regex: Any = ...
    max_length: Any = ...
    min_length: Any = ...

    def __init__(
        self,
        regex: Optional[Any] = ...,
        max_length: Optional[Any] = ...,
        min_length: Optional[Any] = ...,
        **kwargs: Any
    ) -> None:
        ...

    def to_python(self, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def lookup_member(self, member_name: Any) -> None:
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class URLField(StringField):
    url_regex: Any = ...
    schemes: Any = ...

    def __init__(self, url_regex: Optional[Any] = ..., schemes: Optional[Any] = ..., **kwargs: Any) -> None:
        ...

    def validate(self, value: Any) -> None:
        ...


class EmailField(StringField):
    USER_REGEX: Any = ...
    UTF8_USER_REGEX: Any = ...
    DOMAIN_REGEX: Any = ...
    error_msg: str = ...
    domain_whitelist: Any = ...
    allow_utf8_user: Any = ...
    allow_ip_domain: Any = ...

    def __init__(
        self,
        domain_whitelist: Optional[Any] = ...,
        allow_utf8_user: bool = ...,
        allow_ip_domain: bool = ...,
        *args: Any,
        **kwargs: Any
    ) -> None:
        ...

    def validate_user_part(self, user_part: Any):
        ...

    def validate_domain_part(self, domain_part: Any):
        ...

    def validate(self, value: Any) -> None:
        ...


class IntField(BaseField):
    def __init__(self, min_value: Optional[Any] = ..., max_value: Optional[Any] = ..., **kwargs: Any) -> None:
        ...

    def to_python(self, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class LongField(BaseField):
    def __init__(self, min_value: Optional[Any] = ..., max_value: Optional[Any] = ..., **kwargs: Any) -> None:
        ...

    def to_python(self, value: Any):
        ...

    def to_mongo(self, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class FloatField(BaseField):
    def __init__(self, min_value: Optional[Any] = ..., max_value: Optional[Any] = ..., **kwargs: Any) -> None:
        ...

    def to_python(self, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class DecimalField(BaseField):
    min_value: Any = ...
    max_value: Any = ...
    force_string: Any = ...
    precision: Any = ...
    rounding: Any = ...

    def __init__(
        self,
        min_value: Optional[Any] = ...,
        max_value: Optional[Any] = ...,
        force_string: bool = ...,
        precision: int = ...,
        rounding: Any = ...,
        **kwargs: Any
    ) -> None:
        ...

    def to_python(self, value: Any):
        ...

    def to_mongo(self, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class BooleanField(BaseField):
    def to_python(self, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...


class DateTimeField(BaseField):
    def validate(self, value: Any) -> None:
        ...

    def to_mongo(self, value: Any):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class DateField(DateTimeField):
    def to_mongo(self, value: Any):
        ...

    def to_python(self, value: Any):
        ...


class ComplexDateTimeField(StringField):
    separator: Any = ...
    format: Any = ...

    def __init__(self, separator: str = ..., **kwargs: Any) -> None:
        ...

    def __get__(self, instance: Any, owner: Any):
        ...

    def __set__(self, instance: Any, value: Any) -> None:
        ...

    def validate(self, value: Any) -> None:
        ...

    def to_python(self, value: Any):
        ...

    def to_mongo(self, value: Any):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class EmbeddedDocumentField(BaseField):
    document_type_obj: Any = ...

    def __init__(self, document_type: Any, **kwargs: Any) -> None:
        ...

    @property
    def document_type(self):
        ...

    def to_python(self, value: Any):
        ...

    def to_mongo(self, value: Any, use_db_field: bool = ..., fields: Optional[Any] = ...):
        ...

    def validate(self, value: Any, clean: bool = ...) -> None:
        ...

    def lookup_member(self, member_name: Any):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class GenericEmbeddedDocumentField(BaseField):
    def prepare_query_value(self, op: Any, value: Any):
        ...

    def to_python(self, value: Any):
        ...

    def validate(self, value: Any, clean: bool = ...):
        ...

    def lookup_member(self, member_name: Any):
        ...

    def to_mongo(self, document: Any, use_db_field: bool = ..., fields: Optional[Any] = ...):
        ...


class DynamicField(BaseField):
    def to_mongo(self, value: Any, use_db_field: bool = ..., fields: Optional[Any] = ...):
        ...

    def to_python(self, value: Any):
        ...

    def lookup_member(self, member_name: Any):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...

    def validate(self, value: Any, clean: bool = ...) -> None:
        ...


class ListField(ComplexBaseField):
    field: Any = ...
    max_length: Any = ...

    def __init__(self, field: Optional[Any] = ..., max_length: Optional[Any] = ..., **kwargs: Any):
        ...

    def __get__(self, instance: Any, owner: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class EmbeddedDocumentListField(ListField):
    def __init__(self, document_type: Any, **kwargs: Any) -> None:
        ...


class SortedListField(ListField):
    def __init__(self, field: Any, **kwargs: Any) -> None:
        ...

    def to_mongo(self, value: Any, use_db_field: bool = ..., fields: Optional[Any] = ...):
        ...


class DictField(ComplexBaseField):
    field: Any = ...

    def __init__(self, field: Optional[Any] = ..., *args: Any, **kwargs: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def lookup_member(self, member_name: Any):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class MapField(DictField):
    def __init__(self, field: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None:
        ...


class ReferenceField(BaseField):
    dbref: Any = ...
    document_type_obj: Any = ...
    reverse_delete_rule: Any = ...

    def __init__(self, document_type: Any, dbref: bool = ..., reverse_delete_rule: Any = ..., **kwargs: Any) -> None:
        ...

    @property
    def document_type(self):
        ...

    def __get__(self, instance: Any, owner: Any):
        ...

    def to_mongo(self, document: Any):
        ...

    def to_python(self, value: Any):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def lookup_member(self, member_name: Any):
        ...


class CachedReferenceField(BaseField):
    auto_sync: Any = ...
    document_type_obj: Any = ...
    fields: Any = ...

    def __init__(self, document_type: Any, fields: Optional[Any] = ..., auto_sync: bool = ..., **kwargs: Any) -> None:
        ...

    def start_listener(self) -> None:
        ...

    def on_document_pre_save(self, sender: Any, document: Any, created: Any, **kwargs: Any) -> None:
        ...

    def to_python(self, value: Any):
        ...

    @property
    def document_type(self):
        ...

    def __get__(self, instance: Any, owner: Any):
        ...

    def to_mongo(self, document: Any, use_db_field: bool = ..., fields: Optional[Any] = ...):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def lookup_member(self, member_name: Any):
        ...

    def sync_all(self) -> None:
        ...


class GenericReferenceField(BaseField):
    choices: Any = ...

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...

    def __get__(self, instance: Any, owner: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def dereference(self, value: Any):
        ...

    def to_mongo(self, document: Any):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class BinaryField(BaseField):
    max_bytes: Any = ...

    def __init__(self, max_bytes: Optional[Any] = ..., **kwargs: Any) -> None:
        ...

    def __set__(self, instance: Any, value: Any):
        ...

    def to_mongo(self, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...


class GridFSError(Exception):
    ...


class GridFSProxy:
    grid_id: Any = ...
    key: Any = ...
    instance: Any = ...
    db_alias: Any = ...
    collection_name: Any = ...
    newfile: Any = ...
    gridout: Any = ...

    def __init__(
        self,
        grid_id: Optional[Any] = ...,
        key: Optional[Any] = ...,
        instance: Optional[Any] = ...,
        db_alias: Any = ...,
        collection_name: str = ...,
    ) -> None:
        ...

    def __getattr__(self, name: Any):
        ...

    def __get__(self, instance: Any, value: Any):
        ...

    def __bool__(self):
        ...

    def __copy__(self):
        ...

    def __deepcopy__(self, memo: Any):
        ...

    def __eq__(self, other: Any) -> Any:
        ...

    def __ne__(self, other: Any) -> Any:
        ...

    @property
    def fs(self):
        ...

    def get(self, grid_id: Optional[Any] = ...):
        ...

    def new_file(self, **kwargs: Any) -> None:
        ...

    def put(self, file_obj: Any, **kwargs: Any) -> None:
        ...

    def write(self, string: Any) -> None:
        ...

    def writelines(self, lines: Any) -> None:
        ...

    def read(self, size: int = ...):
        ...

    def delete(self) -> None:
        ...

    def replace(self, file_obj: Any, **kwargs: Any) -> None:
        ...

    def close(self) -> None:
        ...


class FileField(BaseField):
    proxy_class: Any = ...
    collection_name: Any = ...
    db_alias: Any = ...

    def __init__(self, db_alias: Any = ..., collection_name: str = ..., **kwargs: Any) -> None:
        ...

    def __get__(self, instance: Any, owner: Any):
        ...

    def __set__(self, instance: Any, value: Any) -> None:
        ...

    def get_proxy_obj(
        self, key: Any, instance: Any, db_alias: Optional[Any] = ..., collection_name: Optional[Any] = ...
    ):
        ...

    def to_mongo(self, value: Any):
        ...

    def to_python(self, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...


class ImageGridFsProxy(GridFSProxy):
    def put(self, file_obj: Any, **kwargs: Any):
        ...

    def delete(self, *args: Any, **kwargs: Any):
        ...

    @property
    def size(self):
        ...

    @property
    def format(self):
        ...

    @property
    def thumbnail(self):
        ...

    def write(self, *args: Any, **kwargs: Any) -> None:
        ...

    def writelines(self, *args: Any, **kwargs: Any) -> None:
        ...


class ImproperlyConfigured(Exception):
    ...


class ImageField(FileField):
    proxy_class: Any = ...

    def __init__(
        self, size: Optional[Any] = ..., thumbnail_size: Optional[Any] = ..., collection_name: str = ..., **kwargs: Any
    ) -> None:
        ...


class SequenceField(BaseField):
    COLLECTION_NAME: str = ...
    VALUE_DECORATOR: Any = ...
    collection_name: Any = ...
    db_alias: Any = ...
    sequence_name: Any = ...
    value_decorator: Any = ...

    def __init__(
        self,
        collection_name: Optional[Any] = ...,
        db_alias: Optional[Any] = ...,
        sequence_name: Optional[Any] = ...,
        value_decorator: Optional[Any] = ...,
        *args: Any,
        **kwargs: Any
    ) -> None:
        ...

    def generate(self):
        ...

    def set_next_value(self, value: Any):
        ...

    def get_next_value(self):
        ...

    def get_sequence_name(self):
        ...

    def __get__(self, instance: Any, owner: Any):
        ...

    def __set__(self, instance: Any, value: Any):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...

    def to_python(self, value: Any):
        ...


class UUIDField(BaseField):
    def __init__(self, binary: bool = ..., **kwargs: Any) -> None:
        ...

    def to_python(self, value: Any):
        ...

    def to_mongo(self, value: Any):
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...


class GeoPointField(BaseField):
    def validate(self, value: Any) -> None:
        ...


class PointField(GeoJsonBaseField):
    ...


class LineStringField(GeoJsonBaseField):
    ...


class PolygonField(GeoJsonBaseField):
    ...


class MultiPointField(GeoJsonBaseField):
    ...


class MultiLineStringField(GeoJsonBaseField):
    ...


class MultiPolygonField(GeoJsonBaseField):
    ...


class LazyReferenceField(BaseField):
    dbref: Any = ...
    passthrough: Any = ...
    document_type_obj: Any = ...
    reverse_delete_rule: Any = ...

    def __init__(
        self,
        document_type: Any,
        passthrough: bool = ...,
        dbref: bool = ...,
        reverse_delete_rule: Any = ...,
        **kwargs: Any
    ) -> None:
        ...

    @property
    def document_type(self):
        ...

    def build_lazyref(self, value: Any):
        ...

    def __get__(self, instance: Any, owner: Any):
        ...

    def to_mongo(self, value: Any):
        ...

    def to_python(self, value: Any):
        ...

    def validate(self, value: Any) -> None:
        ...

    def prepare_query_value(self, op: Any, value: Any):
        ...

    def lookup_member(self, member_name: Any):
        ...


class GenericLazyReferenceField(GenericReferenceField):
    passthrough: Any = ...

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...

    def build_lazyref(self, value: Any):
        ...

    def __get__(self, instance: Any, owner: Any):
        ...

    def validate(self, value: Any):
        ...

    def to_mongo(self, document: Any):
        ...
