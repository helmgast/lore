from typing import Any, Optional

class BaseField:
    name: Any = ...
    creation_counter: int = ...
    auto_creation_counter: int = ...
    db_field: Any = ...
    required: Any = ...
    default: Any = ...
    unique: Any = ...
    unique_with: Any = ...
    primary_key: Any = ...
    validation: Any = ...
    choices: Any = ...
    null: Any = ...
    sparse: Any = ...
    def __init__(self, db_field: Optional[Any] = ..., required: bool = ..., default: Optional[Any] = ..., unique: bool = ..., unique_with: Optional[Any] = ..., primary_key: bool = ..., validation: Optional[Any] = ..., choices: Optional[Any] = ..., null: bool = ..., sparse: bool = ..., **kwargs: Any) -> None: ...
    def __get__(self, instance: Any, owner: Any): ...
    def __set__(self, instance: Any, value: Any) -> None: ...
    def error(self, message: str = ..., errors: Optional[Any] = ..., field_name: Optional[Any] = ...) -> None: ...
    def to_python(self, value: Any): ...
    def to_mongo(self, value: Any): ...
    def prepare_query_value(self, op: Any, value: Any): ...
    def validate(self, value: Any, clean: bool = ...) -> None: ...
    @property
    def owner_document(self): ...
    @owner_document.setter
    def owner_document(self, owner_document: Any) -> None: ...

class ComplexBaseField(BaseField):
    field: Any = ...
    def __get__(self, instance: Any, owner: Any): ...
    def to_python(self, value: Any): ...
    def to_mongo(self, value: Any, use_db_field: bool = ..., fields: Optional[Any] = ...): ...
    def validate(self, value: Any) -> None: ...
    def prepare_query_value(self, op: Any, value: Any): ...
    def lookup_member(self, member_name: Any): ...

class ObjectIdField(BaseField):
    def to_python(self, value: Any): ...
    def to_mongo(self, value: Any): ...
    def prepare_query_value(self, op: Any, value: Any): ...
    def validate(self, value: Any) -> None: ...

class GeoJsonBaseField(BaseField):
    def __init__(self, auto_index: bool = ..., *args: Any, **kwargs: Any) -> None: ...
    def validate(self, value: Any): ...
    def to_mongo(self, value: Any): ...
